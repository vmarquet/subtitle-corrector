{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","importSrt","file","reader","FileReader","readAsText","onload","e","target","text","result","text2","replace","split","shift","lines","i","length","push","id","trim","startTime","timeMs","endTime","setState","val","parts","exec","parseInt","isNaN","displayTimestamp","ms","total_seconds","Math","floor","total_minutes","hours","toString","padStart","minutes","seconds","milliseconds","cleanLines","state","map","line","removeLine","filter","export","alert","className","type","onChange","files","onClick","this","style","styles","timestamp","React","Component","root","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2483fdb5.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\ntype State = {\n  lines: Array<Line>,\n}\ntype Line = {\n  id: string\n  startTime: number\n  endTime: number\n  text: string\n}\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props)\n\n    this.state = {\n      lines: []\n    }\n  }\n\n\n  importSrt = (file: File) => {\n    const reader = new FileReader()\n    reader.readAsText(file)\n\n    reader.onload = (e) => {\n      if (!e.target) return\n\n      var text = e.target.result as string\n      \n      text = text.replace(/\\r/g, '')\n      const regex = /(\\d+)\\n(\\d{2}:\\d{2}:\\d{2},\\d{3}) --> (\\d{2}:\\d{2}:\\d{2},\\d{3})/g\n      const text2 = text.split(regex)\n      text2.shift()\n\n      const lines = []\n\n      for (let i = 0; i < text2.length; i += 4) {\n        lines.push({\n          id: text2[i].trim(),\n          startTime: this.timeMs(text2[i + 1].trim()),\n          endTime: this.timeMs(text2[i + 2].trim()),\n          text: text2[i + 3].trim()\n        })\n      }\n\n      this.setState({ lines: lines })\n    }\n  }\n\n  timeMs = (val: string): number => {\n    const regex = /(\\d+):(\\d{2}):(\\d{2}),(\\d{3})/\n    const parts = regex.exec(val)\n\n    if (parts == null)\n      return 0\n\n    for (var i = 1; i < 5; i++) {\n      // @ts-ignore\n      parts[i] = parseInt(parts[i], 10)\n\n      // @ts-ignore\n      if (isNaN(parts[i]))\n        // @ts-ignore\n        parts[i] = 0\n    }\n\n    // hours + minutes + seconds + ms\n    // @ts-ignore\n    return parts[1] * 3600000 + parts[2] * 60000 + parts[3] * 1000 + parts[4]\n  }\n\n  displayTimestamp = (ms: number): string => {\n    const total_seconds = Math.floor(ms / 1000)\n    const total_minutes = Math.floor(total_seconds / 60)\n    const total_hours = Math.floor(total_minutes / 60)\n\n    const hours = total_hours.toString().padStart(2, '0')\n    const minutes = (total_minutes % 60).toString().padStart(2, '0')\n    const seconds = (total_seconds % 60).toString().padStart(2, '0')\n    const milliseconds = (ms % 1000).toString().padStart(2, '0')\n\n    return `${hours}:${minutes}:${seconds}:${milliseconds}`\n  }\n\n  // Remove:\n  // - text between parentheses: ex: (CAR APPROACHING)\n  // - text between brackets: ex: [CAR APPROACHING]\n  cleanLines = () => {\n    const lines: Array<Line> = []\n\n    this.state.lines.map(line => {\n      line.text = line.text.replace(/ *\\([^)]*\\) */g, '')\n      line.text = line.text.replace(/ *\\[[^\\]]*\\] */g, '')\n\n      if (line.text.trim() !== '')\n        lines.push(line)\n    })\n\n    this.setState({ lines: lines })\n  }\n\n  removeLine = (id: string) => {\n    this.setState({ lines: this.state.lines.filter(line => line.id !== id) })\n  }\n\n  export = () => {\n    alert('TODO')\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"file\" onChange={e => this.importSrt(e.target!.files![0])} /> &nbsp;\n        <button onClick={this.cleanLines}>clean</button> &nbsp;\n        <button onClick={this.export}>export</button>\n        <br/><br/>\n\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Start</th>\n              <th>End</th>\n              <th>Text</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.lines.map(line => {\n              return (\n                <tr>\n                  <td>{line.id}</td>\n                  <td style={styles.timestamp}>{this.displayTimestamp(line.startTime)}</td>\n                  <td style={styles.timestamp}>{this.displayTimestamp(line.endTime)}</td>\n                  <td>{line.text}</td>\n                  <td>\n                    <span onClick={() => this.removeLine(line.id)}>remove</span>\n                  </td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\n\nconst styles: {[key: string]: React.CSSProperties} = {\n  root: {\n\n  },\n  timestamp: {\n    fontFamily: 'monospace',\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}